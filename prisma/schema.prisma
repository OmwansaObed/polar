generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
   id            String  @id @default(cuid()) @db.VarChar(255)
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?   
  password       String?
  accounts       Account[]
  sessions       Session[]
}


model Account {
  id                String  @id @default(cuid()) @db.VarChar(255)
  userId            String   @db.VarChar(255)
  type              String   @db.VarChar(255)
  provider          String   @db.VarChar(255)
  providerAccountId String   @db.VarChar(255)
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        BigInt?
  token_type        String?  @db.VarChar(255)
  scope             String?  @db.VarChar(255)
  id_token          String?  @db.Text
  session_state     String?  @db.VarChar(255)

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], map: "provider_providerAccountId")
  @@index([userId], map: "userId")
}

model Session {
  id           String   @id @db.VarChar(255)
  sessionToken String   @unique(map: "sessionToken") @db.VarChar(255)
  userId       String   @db.VarChar(255)
  expires      DateTime @db.DateTime(0)

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "userId")
}

model Booking {
  id             Int              @id @default(autoincrement())
  customerName   String?          @db.VarChar(255)
  customerPhone  String?          @db.VarChar(20)
  customerEmail  String?          @db.VarChar(100)
  sessionType    String?          @db.VarChar(100)
  date           DateTime?        @db.Date
  time           DateTime?        @db.Time(0)
  participants   Int?
  addOns         Json?
  totalAmount    Decimal?         @db.Decimal(10, 2)
  status         BookingStatus    @default(pending)
  createdAt      DateTime         @default(now()) @db.Timestamp(0)

  payments       Payment[]
}

model Payment {
  id                        Int             @id @default(autoincrement())
  bookingId                Int?
  phone                    String?          @db.VarChar(20)
  amount                   Decimal?         @db.Decimal(10, 2)
  status                   PaymentStatus    @default(pending)
  mpesaCheckoutRequestId   String?          @db.VarChar(255)
  createdAt                DateTime         @default(now()) @db.Timestamp(0)

  booking                  Booking?         @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId], map: "booking_id")
}

model VerificationToken {
  token      String   @id @db.VarChar(255)
  identifier String   @db.VarChar(255)
  expires    DateTime @db.DateTime(0)

  @@unique([identifier, token], map: "identifier_token")
}

enum PaymentStatus {
  pending
  success
  failed
}

enum BookingStatus {
  pending
  confirmed
  cancelled
}
